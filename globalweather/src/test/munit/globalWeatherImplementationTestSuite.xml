<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd">
    <munit:config name="munit" doc:name="MUnit configuration"/>
    <spring:beans>
        <spring:import resource="classpath:implementation.xml"/>
    </spring:beans>
    <munit:test name="getWeatherFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['GetWeatherWSConsumer']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[ getResource('mocks/mockGetWeatherResponse').asString() ]"/>
        </mock:when>
        
        <munit:set payload="#[]" doc:name="Set Message">
        	<munit:inbound-properties>
        		<munit:inbound-property key="http.query.params" value="#[['city': 'abc']]"/>
        	</munit:inbound-properties>
        </munit:set>
        
        <flow-ref name="getWeatherFlow" doc:name="getWeatherFlow"/>
        <logger message="#['output payload is \n'+message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>
        <munit:assert-on-equals expectedValue="#[getResource('mocks/getWeatherExpected.json').asString().replaceAll(&quot;\\s+&quot;,&quot;&quot;)]" actualValue="#[payload.replaceAll(&quot;\\s+&quot;,&quot;&quot;)]" doc:name="Assert Equals" message="GetWeather output does not match expected payload."/>
    </munit:test>
    <munit:test name="getCitiesFlowTest" description="Test">
        <mock:when messageProcessor=".*:.*" doc:name="Mock">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['GetCitiesWSConsumer']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[ getResource('mocks/mockGetCitiesResponse').asString() ]"/>
        </mock:when>
        <munit:set payload="#[]" doc:name="Set Message">
            <munit:inbound-properties>
                <munit:inbound-property key="http.query.params" value="#[['country': 'abc']]"/>
            </munit:inbound-properties>
        </munit:set>
        <flow-ref name="getCitiesByCountryFlow" doc:name="getCitiesByCountryFlow"/>
        <logger message="#['output payload is \n'+message.payloadAs(java.lang.String)]" level="INFO" doc:name="Logger"/>
        <munit:assert-on-equals message="GetCities output does not match expected payload." expectedValue="#[getResource('mocks/getCitiesExpected.json').asString().replaceAll(&quot;\\s+&quot;,&quot;&quot;)]" actualValue="#[payload.replaceAll(&quot;\\s+&quot;,&quot;&quot;)]" doc:name="Assert Equals"/>
    </munit:test>
</mule>
